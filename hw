#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 12 20:26:20 2018

@author: sarucins
"""
'''
def calc_fib(n):
    f=[]
    f.append(0)
    f.append(1)
    if (n <= 1):
        return n
    else:
        while n>len(f)-1:
            f.append(f[-1]+f[-2])
        return f[-1]
     

n = int(input())
print(calc_fib(n))

def fib2(n):
    return round((1/5**.5)*(((1+5**.5)/2)**n - ((1-5**.5)/2)**n))
  
import sys
def gcd_naive(a, b):
    if b==0:
        return a
    else:
        new_b= a%b
        new_a= b
        return gcd_naive(new_a, new_b)

def gcd_naive(a, b):
    if b==0:
        return a
    else:
        new_b= a%b
        new_a= b
        return gcd_naive(new_a, new_b)
def lcm_naive(a, b):
    k= max(a,b)
    l= min(a,b)
    x=gcd_naive(k,l)
    return round(abs(a*b)//x)



if __name__ == "__main__":
    input = sys.stdin.read()

    print(lcm_naive(226553150,1023473145))


import sys
def fib_mod_seq(n,m):
    fib=[0,1]
    fib_mod=[0,1]
    fib_bit=False
    fib_use=False
    while fib_bit==False:
        fib.append(fib[-1]+fib[-2])
        fib_mod.append(fib[-1]%m)
        if fib_mod[-1]== 1 and fib_mod[-2]== 0:
            fib_bit=True
            fib_use=True
        if len(fib)==n+1:
            fib_bit=True
            fib_use=False
    fib_mod=fib_mod[:-2]
    return fib_mod, fib, fib_use

        
    
def get_fibonacci_huge_naive(n, m):
    if n <= 1:
        return n
    fib_mod, fib, fib_use=fib_mod_seq(n,m)
    if fib_use==True:
        print(len(fib_mod))
        k=n%len(fib_mod)
        return fib_mod[k]
    if fib_use==False:
        print('haha')
        return fib[-1]%m

def fib_mod_seq2(n,m):
    fib=[0,1]
    fib_mod=[0,1]
    for i in range(n-1):
        x=fib_mod[-1]+fib_mod[-2]
        fib_mod.append(x%m)
        if fib_mod[-1]== 1 and fib_mod[-2]== 0:
            fib_mod=fib_mod[:-2]
            k=n%len(fib_mod)
            return fib_mod[k]
    return fib_mod[-1]

if __name__ == '__main__':
    input = sys.stdin.read();

    print(get_fibonacci_huge_naive(100, 1000))
    print(fib_mod_seq2(100, 1000))


import sys

def fibonacci_sum_naive(n):
    if n <= 1:
        return n

    previous = 0
    current  = 1
    sum      = 1

    for _ in range(n - 1):
        previous, current = current%10, (previous + current)%10
        sum = (current+sum)%10

    return sum

def fib_mod_seq3(n):
    fib=[0,1]
    fib_mod=[0, 1, 1, 2, 3, 5, 8, 3, 1, 4, 5, 9, 4, 3, 7, 0, 7, 7, 4, 1, 5, 6, 1, 7, 8, 5, 3, 8, 1, 9, 0, 9, 9, 8, 7, 5, 2, 7, 9, 6, 5, 1, 6, 7, 3, 0, 3, 3, 6, 9, 5, 4, 9, 3, 2, 5, 7, 2, 9, 1]
    k=n%len(fib_mod)
    return (sum(fib_mod[0:k+1]))%10

if __name__ == '__main__':
    input = sys.stdin.read()
    print(fib_mod_seq3(2345))
    print(fibonacci_sum_naive(2345))
'''
import sys
def fib_mod_seq3(n,p):
    fib=[0,1]
    fib_mod=[0, 1, 1, 2, 3, 5, 8, 3, 1, 4, 5, 9, 4, 3, 7, 0, 7, 7, 4, 1, 5, 6, 1, 7, 8, 5, 3, 8, 1, 9, 0, 9, 9, 8, 7, 5, 2, 7, 9, 6, 5, 1, 6, 7, 3, 0, 3, 3, 6, 9, 5, 4, 9, 3, 2, 5, 7, 2, 9, 1]
    i=p-n
    if i==0:
    	k= n%len(fib_mod)
    	return fib_mod[k]
    if i < 60:
        h=n%len(fib_mod)
        u = p%len(fib_mod)
        if h>u:
            return sum(fib_mod[h:]+fib_mod[:u+1])%10
        if u>h:
            return sum(fib_mod[h:u+1])%10
    else:
        h=n%len(fib_mod)
        u = p%len(fib_mod)
        return(sum(fib_mod[h:]+fib_mod[:u+1]))%10


if __name__ == '__main__':
    input = sys.stdin.read()
    print(fib_mod_seq3(9999999999999999, 99999999999999999))
